<?php

namespace NDM\Bundle\TryCatch\ApiBundle\Entity;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Query;

class IssueRepository extends EntityRepository
{
	public function findAllAsArray() {
		return $this->createQueryBuilder('i')->getQuery()->execute(array(), Query::HYDRATE_ARRAY);
	}

	public function getGraphSummary() {
		$open = $this->findAll();

		$curOpen = 0;

		$items = array();
		foreach($open as $item) {
			if(!isset($items[$item->getPriority()])) {
				$items[$item->getPriority()] = array();
			}

			$items[$item->getPriority()][] = $item;
		}

		$dates = array();
		foreach($items as $i => $group) {
			$dates[$i] = $this->calculateGraphSummary($group);
		}


		return $dates;
	}

	protected function calculateGraphSummary($open) {
		$today = new \DateTime('+2 weeks');
		$date = new \DateTime('1 month ago');
		$curOpen = 0;

		while($date < $today) {
			$closedToday = 0;
			foreach($open as $i => $item) {
				if($item->getClosedAt() && $item->getClosedAt()->format('Y-m-d') === $date->format('Y-m-d')) {
					$closedToday--;
				}

				if($item->getCreatedAt() && $item->getCreatedAt()->format('Y-m-d') === $date->format('Y-m-d')) {
					$curOpen++;
				}
			}

			$dates[$date->format('Y-m-d')] = $curOpen;
			$curOpen += $closedToday;

			$date = $date->modify('+1 day');
		}

		return $dates;
	}

	public function findAllForGraph() {
		$items = $this->findAllAsArray();
		$data = array();
		foreach($items as $item) {
			$createdKey = $item['createdAt']->format('Y-m-d');
			if(!isset($data[$createdKey])) {
				$data[$createdKey] = array('open' => array(), 'closed' => array());
			}

			$data[$createdKey]['open'][] = $item;

			if($item['closedAt'] instanceof \DateTime) {
				$closedKey = $item['closedAt']->format('Y-m-d');
				if(!isset($data[$closedKey])) {
					$data[$closedKey] = array('open' => array(), 'closed' => array());
				}

				$data[$closedKey]['closed'] = $item;
			}
		}

		return $data;
	}
}