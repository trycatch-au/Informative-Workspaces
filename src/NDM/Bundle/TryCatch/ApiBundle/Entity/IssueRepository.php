<?php

namespace NDM\Bundle\TryCatch\ApiBundle\Entity;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Query;

class IssueRepository extends EntityRepository
{
	public function findAllAsArray() {
		$qb = $this->createQueryBuilder('i');;
		$qb->orderBy($qb->expr()->asc('i.priority'));

		return $qb
		    ->getQuery()
    		->execute(array(), Query::HYDRATE_ARRAY)
		;
	}

	public function getGraphSummary() {
		$open = $this->findAll();

		$curOpen = 0;

		$items = array();
		foreach($open as $item) {
			if(!isset($items[$item->getPriority()])) {
				$items[$item->getPriority()] = array();
			}

			$items[$item->getPriority()][] = $item;
		}

		$dates = array();
		foreach($items as $i => $group) {
			$dates[$i] = $this->calculateGraphSummary($group);
		}


		return $dates;
	}

	protected function calculateGraphSummary($open) {
		$today = new \DateTime('2012-05-10');
		$date = new \DateTime('2012-04-10');
		$curOpen = 0;

		while($date < $today) {
			$closedToday = 0;
			foreach($open as $i => $item) {
				if($item->getClosedAt() && $item->getClosedAt()->format('Y-m-d') === $date->format('Y-m-d')) {
					$closedToday--;
				}

				if($item->getCreatedAt() && $item->getCreatedAt()->format('Y-m-d') === $date->format('Y-m-d')) {
					$curOpen++;
				}
			}

			$dates[$date->format('Y-m-d')] = $curOpen;
			$curOpen += $closedToday;

			$date = $date->modify('+1 day');
		}

		return $dates;
	}

	public function findAllForGraph() {
		$items = $this->findAllAsArray();
		$data = array();
		foreach($items as $item) {
			$createdKey = $item['createdAt']->format('Y-m-d');
			if(!isset($data[$createdKey])) {
				$data[$createdKey] = array('open' => array(), 'closed' => array());
			}

			$data[$createdKey]['open'][] = $item;

			if($item['closedAt'] instanceof \DateTime) {
				$closedKey = $item['closedAt']->format('Y-m-d');
				if(!isset($data[$closedKey])) {
					$data[$closedKey] = array('open' => array(), 'closed' => array());
				}

				$data[$closedKey]['closed'] = $item;
			}
		}

		return $data;
	}

    public function getAverageOpenTime() {
        // Learn to code Dave...
        // Move this to a command and cache the result.

        $issues = $this->findAll();
        $curDate = new \DateTime('+1 day');
        $date = new \DateTime('-2 weeks');
        $data = array();
        while($date < $curDate) {
            $key = $date->format('Y-m-d');
            $data[$key] = array();

            foreach($issues as $issue) {
                $closed = $issue->getClosedAt();
                $created = $issue->getCreatedAt();

                if($issue->wasOpenOn($date)) {
                    $data[$key][] = $issue;
                }
            }

            $date->modify('+1 day');
        }

        foreach($data as $date => $issues) {
            $averageOpenTime = 0;
            if(count($issues) > 0) {
                $data[$date] = array('time' => 0, 'count' => 0);
                foreach($issues as $issue) {
                    $closed = $issue->getClosedAt();
                    $created = $issue->getCreatedAt();
                    if(!$created) {
                        continue;
                    }

                    if(!($closed instanceof \DateTime)) {
                        $closed = new \DateTime();
                    }

                    $averageOpenTime += $closed->getTimestamp() - $created->getTimestamp();
                }
                $averageOpenTime = ($averageOpenTime / count($issues));
            }

            $data[$date] = array('time' => $averageOpenTime, 'count' => count($issues));
        }

        return $data;
    }

    public function getGroupedIssues() {
        $issues = array();
        $qb = $this->createQueryBuilder('i');
        $results = $qb->getQuery()->execute();
        $open = array();

        foreach($results as $issue) {
            if(!isset($issues[$issue->getCreatedAt()->format('Y-m-d')])) {
                $issues[$issue->getCreatedAt()->format('Y-m-d')] = array();
            }
            $issues[$issue->getCreatedAt()->format('Y-m-d')][] = $issue;
        }

        return $issues;
    }
}
